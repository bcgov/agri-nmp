// <auto-generated />
using System;
using Agri.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace SERVERAPI.Migrations
{
    [DbContext(typeof(AgriConfigurationContext))]
    [Migration("20181029163631_CropsAndChildren")]
    partial class CropsAndChildren
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Agri.Models.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("Agri.Models.AnimalSubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnimalId");

                    b.Property<decimal>("LiquidPerGalPerAnimalPerDay");

                    b.Property<string>("Name");

                    b.Property<decimal>("SolidLiquidSeparationPercentage");

                    b.Property<decimal>("SolidPerGalPerAnimalPerDay");

                    b.Property<decimal>("SolidPerPoundPerAnimalPerDay");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.ToTable("AnimalSubType");
                });

            modelBuilder.Entity("Agri.Models.Browser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MinVersion");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Browsers");
                });

            modelBuilder.Entity("Agri.Models.Crop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CropName");

                    b.Property<decimal?>("CropRemovalFactorK2O");

                    b.Property<decimal?>("CropRemovalFactorP2O5");

                    b.Property<decimal?>("CropRemovalFactor_N");

                    b.Property<int>("CropTypeId");

                    b.Property<decimal?>("HarvestBushelsPerTon");

                    b.Property<decimal?>("N_High_lbPerAc");

                    b.Property<decimal>("N_RecommCd");

                    b.Property<decimal?>("N_Recomm_lbPerAc");

                    b.Property<int>("PrevCropCd");

                    b.Property<int>("PrevYearManureAppl_VolCatCd");

                    b.Property<int>("SortNum");

                    b.Property<int>("YieldCd");

                    b.HasKey("Id");

                    b.HasIndex("CropTypeId");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("Agri.Models.CropSTKRegionCd", b =>
                {
                    b.Property<int>("CropId");

                    b.Property<int?>("PotassiumCropGroupRegionCd");

                    b.Property<int>("SoilTestPotassiumRegionCd");

                    b.HasKey("CropId", "PotassiumCropGroupRegionCd");

                    b.HasAlternateKey("CropId", "SoilTestPotassiumRegionCd");

                    b.ToTable("CropSTKRegionCd");
                });

            modelBuilder.Entity("Agri.Models.CropSTPRegionCd", b =>
                {
                    b.Property<int>("CropId");

                    b.Property<int?>("PhosphorousCropGroupRegionCd");

                    b.Property<int>("SoilTestPhosphorousRegionCd");

                    b.HasKey("CropId", "PhosphorousCropGroupRegionCd");

                    b.HasAlternateKey("CropId", "SoilTestPhosphorousRegionCd");

                    b.ToTable("CropSTPRegionCd");
                });

            modelBuilder.Entity("Agri.Models.CropType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CoverCrop");

                    b.Property<bool>("CrudeProteinRequired");

                    b.Property<bool>("CustomCrop");

                    b.Property<bool>("ModifyNitrogen");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CropType");
                });

            modelBuilder.Entity("Agri.Models.CropYield", b =>
                {
                    b.Property<int>("CropId");

                    b.Property<int>("LocationId");

                    b.Property<decimal?>("Amt");

                    b.HasKey("CropId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("CropYield");
                });

            modelBuilder.Entity("Agri.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Agri.Models.PrevCropType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CropTypeId");

                    b.Property<int?>("CropTypeId1");

                    b.Property<string>("Name");

                    b.Property<int>("PrevCropCd");

                    b.Property<int>("nCreditImperial");

                    b.Property<int>("nCreditMetric");

                    b.HasKey("Id");

                    b.HasIndex("CropTypeId");

                    b.HasIndex("CropTypeId1");

                    b.ToTable("PrevCropType");
                });

            modelBuilder.Entity("Agri.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LocationId");

                    b.Property<string>("Name");

                    b.Property<int>("SoilTestPhosphorousRegionCd");

                    b.Property<int>("SoilTestPotassiumRegionCd");

                    b.Property<int>("SortNum");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Agri.Models.AnimalSubType", b =>
                {
                    b.HasOne("Agri.Models.Animal", "Animal")
                        .WithMany("AnimalSubTypes")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Crop", b =>
                {
                    b.HasOne("Agri.Models.CropType", "CropType")
                        .WithMany("Crops")
                        .HasForeignKey("CropTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.CropSTKRegionCd", b =>
                {
                    b.HasOne("Agri.Models.Crop")
                        .WithMany("CropSTKRegionCds")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.CropSTPRegionCd", b =>
                {
                    b.HasOne("Agri.Models.Crop")
                        .WithMany("CropSTPRegionCds")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.CropYield", b =>
                {
                    b.HasOne("Agri.Models.Crop", "Crop")
                        .WithMany("CropYields")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Location", "Location")
                        .WithMany("CropYields")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.PrevCropType", b =>
                {
                    b.HasOne("Agri.Models.CropType")
                        .WithMany("PrevCropTypes")
                        .HasForeignKey("CropTypeId");

                    b.HasOne("Agri.Models.PrevCropType", "CropType")
                        .WithMany()
                        .HasForeignKey("CropTypeId1");
                });

            modelBuilder.Entity("Agri.Models.Region", b =>
                {
                    b.HasOne("Agri.Models.Location")
                        .WithMany("Regions")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
