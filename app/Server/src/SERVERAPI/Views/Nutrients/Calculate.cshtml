@using Agri.Models
@model SERVERAPI.ViewModels.CalculateViewModel

@{
    ViewBag.Title = "Calculate Nutrients";
}
<!-- modal placeholder-->
<div id='myModal' class='modal'>
    <div class="modal-dialog" id="divSize">
        <div class="modal-content">
            <div id='myModalContent'></div>
        </div>
    </div>
</div>

<!-- BODY CONTENT -->

<div class="header-height"></div>

<br />
<br />

<div id="overlay" style="display: none;"></div>
<div class="container">
    <div class="step-forms col-sm-12">
        <!-- PAGE CONTENT -->
        <form asp-controller="Nutrients" asp-action="Calculate" method="post">
            <div class="step-forms col-sm-2">
                @if (Model.fldsFnd > 0)
                {
                    <div id="fieldList">
                        @await Component.InvokeAsync("FieldList", new { cntl = "Nutrients", actn = "Calculate" })
                    </div>
                }

                @if (Model.regionFnd)
                {
                    <button class="btn btn-default" type="button" style="width:90px" data_modal2="" data-type="@Url.Action("FieldDetail", "Fields", new { target = "#fieldList", cntl = "Nutrients", actn = "Calculate", currFld = Model.currFld })">Add field</button>
                }

                @if (Model.fldsFnd > 1 &&
               Model.itemsPresent)
                {
                    <div>&nbsp;</div>
                    <button class="btn btn-default" type="button" style="width:90px" data_modal3="" data-type="@Url.Action("FieldCopy", "Fields", new { currFld = Model.currFld })">Copy field</button>
                }
            </div>
            <div class="step-forms col-sm-9">
                <div id="scrContents">
                    @if (Model.fldsFnd > 0)
                    {
                        <div class="form-box">
                            <div class="form-box-header clearfix">
                                <span>
                                    <button title="Add a Crop to the Field" aria-label="Add a Crop to the Field" class="btn btn-success" data_modal="" data-type="@Url.Action("CropDetails", "Nutrients", new { fldName = Model.currFld })">Add Crop</button>
                                </span>
                                <span style="float:right;">
                                    <button title="Add a Manure/Compost to the Field" aria-label="Add a Manure/Compost to the Field" class="btn btn-success" type="button" data_modal="" data-type="@Url.Action("ManureDetails", "Nutrients", new { fldName = Model.currFld })">Add Manure</button>
                                    <button title="Add a Fertilizer to the Field" aria-label="Add a Fertilizer to the Field" class="btn btn-success" type="button" data_modal="" data-type="@Url.Action("FertilizerDetails", "Nutrients", new { fldName = Model.currFld })">Add Fertilizer</button>
                                    <button title="Add Other Nutrient to the Field" aria-label="Add Other Nutrient to the Field" class="btn btn-success" type="button" data_modal="" data-type="@Url.Action("OtherDetails", "Nutrients", new { fldName = Model.currFld })">Add Other</button>
                                </span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="form-box">
                            <div class="form-box-header clearfix">
                                <h3>To add nutrients please add a field first</h3>
                            </div>
                        </div>
                    }
                    @if (Model.itemsPresent)
                    {
                        <div class="form-box">
                            <div class="panel-group">
                                <div class="Table">
                                    <div class="TableBody" id="heading">
                                        @await Component.InvokeAsync("CalcHeading", new { fldName = Model.currFld })
                                    </div>
                                    @if (Model.currFld != null)
                                    {
                                        <div class="TableBody" id="crop">
                                            @await Component.InvokeAsync("CalcCrops", new { fldName = Model.currFld })
                                        </div>
                                        <div class="TableBody" id="manure">
                                            @await Component.InvokeAsync("CalcManure", new { fldName = Model.currFld })
                                        </div>
                                        <div class="TableBody" id="fertilizer">
                                            @await Component.InvokeAsync("CalcFertilizer", new { fldName = Model.currFld })
                                        </div>
                                        <div class="TableBody" id="other">
                                            @await Component.InvokeAsync("CalcOther", new { fldName = Model.currFld })
                                        </div>
                                        <div class="TableBody" id="prevYearManure">
                                            @await Component.InvokeAsync("CalcPrevYearManure", new { fldName = Model.currFld })
                                        </div>
                                        <div class="TableBody" id="soilTestNitrogenCredit">
                                            @await Component.InvokeAsync("SoilTestNitrateOverride", new { fldName = Model.currFld })
                                        </div>
                                        <div class="TableBody" id="summary">
                                            @await Component.InvokeAsync("CalcSummary", new { fldName = Model.currFld })
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="form-box">
                            <div class="form-box-header clearfix">
                                <p>Add a Crop to Start Calculations</p>
                                <h1>Guide to Interpreting Calculations</h1>
                                @foreach (var i in Model.icons)
                                {
                                    <div style='padding-top:10px'><img src="~/images/@(i.Name).svg" height='30' width='30' /><span style='margin-left:30px'>@i.Definition</span></div>
                                }
                            </div>
                        </div>
                    }
                    @if (Model.currFld != null)
                    {
                        <div class="form-box" id="message">
                            @await Component.InvokeAsync("CalcMessages", new { fldName = Model.currFld })
                        </div>
                    }
                </div>
            </div>

            <br />
            <br />
            <br />
            <br />
            <div id="next-previous-navigation">
                @await Component.InvokeAsync("NextPreviousNavigation", new NextPrevNavViewModel { CurrentAction = CoreSiteActions.Calculate })
            </div>
            @Html.HiddenFor(x => x.fldsFnd)
            @Html.HiddenFor(x => x.currFld)
            @Html.HiddenFor(x => x.itemsPresent)
            @Html.HiddenFor(x => x.noData)
        </form>
    </div>
</div>
@section Scripts {
    <script type="text/javascript">
    //
    // data_modal  -> uses large format modal popup
    // data_modal2 -> uses small format modal popup and refreshes the entire screen when done
    // data_modal3 -> uses small format modal popup
    //
    // ensure this event handler is attached to current and future elements (after partial renders)
    $(document).on("click", '[data_modal]', function (e) {
        $.ajaxSetup({ cache: false });
        $type = $(this).data('type'); // this works as of jQuery 1.4.3, otherwise $(this).attr('data-type');
        $("#divSize").removeClass("modal-carousel");
        $("#divSize").addClass("modal-large");
        $('#myModalContent').load($type, function () {
            $('#myModal').modal({
                /*backdrop: 'static',*/
                //keyboard: true
            }, 'show');
            bindForm(this);
        });
        return false;
    });

    $(document).on("click", '[data_modal2]', function (e) {
        $.ajaxSetup({ cache: false });
        $type = $(this).data('type'); // this works as of jQuery 1.4.3, otherwise $(this).attr('data-type');
        $("#divSize").removeClass("modal-carousel");
        $("#divSize").removeClass("modal-large");
        $('#myModalContent').load($type, function () {
            $('#myModal').modal({
                /*backdrop: 'static',*/
                //keyboard: true
            }, 'show');
            bindForm2(this);
        });
        return false;
    });

    $(document).on("click", '[data_modal3]', function (e) {
        $.ajaxSetup({ cache: false });
        $type = $(this).data('type'); // this works as of jQuery 1.4.3, otherwise $(this).attr('data-type');
        $("#divSize").removeClass("modal-carousel");
        $("#divSize").removeClass("modal-large");
        $('#myModalContent').load($type, function () {
            $('#myModal').modal({
                /*backdrop: 'static',*/
                //keyboard: true
            }, 'show');
            bindForm(this);
        });
        return false;
    });

    $(document).on("click", '[data_modal4]', function (e) {
        $.ajaxSetup({ cache: false });
        $type = $(this).data('type'); // this works as of jQuery 1.4.3, otherwise $(this).attr('data-type');
        $("#divSize").removeClass("modal-carousel");
        $("#divSize").removeClass("modal-large");
        $('#myModalContent').load($type, function () {
            $('#myModal').modal({
                /*backdrop: 'static',*/
                //keyboard: true
            }, 'show');
            bindForm4(this);
        });
        return false;
    });

    $(".modal").on("hidden.bs.modal", function () {
        $(".myModalContent").html("");
    });

    function bindForm(dialog) {
        $('form', dialog).submit(function () {
            $.ajax({
                cache: false,
                url: this.action,
                type: this.method,
                data: $(this).serialize(),
                success: function (result) {
                    if (result.success) {
                        if (result.reload) {
                            window.location.href = '@Url.Action("Calculate","Nutrients", new { nme = Model.currFld })';
                        }
                        else {
                            document.getElementById("overlay").style.display = "block";
                            $('#myModal').modal('hide');
                            $("#heading").load(result.urlHead);
                            $('#message').load(result.urlMsg);
                            $('#summary').load(result.urlSumm);
                            $(result.target).load(result.url, function (response, status, xhr) {
                                if (status != "error") {
                                    document.getElementById("overlay").style.display = "none";
                                }
                            });
                        }
                    } else {
                        $('#myModalContent').html(result);
                        bindForm(dialog);
                    }
                }
            });
            return false;
        });
    }
    function bindForm2(dialog) {
        $('form', dialog).submit(function () {
            $.ajax({
                cache: false,
                url: this.action,
                type: this.method,
                data: $(this).serialize(),
                success: function (result) {
                    if (result.success) {
                        $('#myModal').modal('hide');
                        if (result.url != '') {
                            window.location.href = result.url;
                        }
                    } else {
                        $('#myModalContent').html(result);
                        bindForm2(dialog);
                    }
                }
            });
            return false;
        });
    }

    function bindFormW(dialog) {
        $('form', dialog).submit(function () {
            $.ajax({
                cache: false,
                url: this.action,
                type: this.method,
                data: $(this).serialize(),
                success: function (result) {
                    if (result.success) {
                        $('#myModal').modal('hide');
                        window.location.href = '@Url.Action("Report","Report")';
                    } else {
                        $('#myModalContent').html(result);
                        bindFormW(dialog);
                    }
                }
            });
            return false;
        });
    }

    function bindForm4(dialog) {
        $('form', dialog).submit(function () {
            $.ajax({
                cache: false,
                url: this.action,
                type: this.method,
                data: $(this).serialize()
            })
                .done(function (result) {
                    if (result.success) {
                        $('#myModal').modal('hide');
                        if (result.url != '') {
                            document.getElementById("overlay").style.display = "block";
                            $('#summary').load(result.urlSumm);
                            $('#message').load(result.urlMsg);
                            $(result.target).load(result.url, function (response, status, xhr) {
                                if (status != "error") {
                                    document.getElementById("overlay").style.display = "none";
                                }
                            });
                        }
                    } else {
                        $('#myModalContent').html(result);
                        bindForm4(dialog);
                    }
                });

            return false;
        });
    }

    //function bindForm3(dialog) {
    //    $('form', dialog).submit(function () {
    //        $.ajax({
    //            cache: false,
    //            url: this.action,
    //            type: this.method,
    //            data: $(this).serialize()
    //        })
    //            .done(function (result) {
    //                if (result.success) {
    //                    alert(result);
    //                    $('#myModal').modal('hide');
    //                    $('#heading').load(result.urlHead);
    //                    $('#message').load(result.urlMsg);
    //                    $(result.target).load(result.url); //  Load data from the server and place the returned HTML into the matched element
    //                    $('#summary').load(result.urlSumm);
    //                } else {
    //                    $('#myModalContent').html(result);
    //                    bindForm3(dialog);
    //                }
    //            });

    //        return false;
    //    });
    //}

    $(document).ready(function () {
        $("body").on("change", "#ddlMan", function () {
            $('#buttonPressed').val("TypeChange");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("change", "#ddlTyp", function () {
            $('#buttonPressed').val("TypeChange");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("change", "#ddlFert", function () {
            $('#buttonPressed').val("FertilizerChange");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("change", "#ddlHarvestUnits", function () {
            $('#buttonPressed').val("HarvestUnitChange");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("change", "#ddlDensity", function () {
            $('#buttonPressed').val("DensityChange");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("change", "#ddlAppl", function () {
            $('#buttonPressed').val("ApplChange");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("change", "#ddlCrop", function () {
            $('#buttonPressed').val("CropChange");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("change", "#ddlPrev", function () {
            $('#buttonPressed').val("PrevChange");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("click", "#rstN", function () {
            $('#buttonPressed').val("ResetN");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("click", "#rstA", function () {
            $('#buttonPressed').val("ResetA");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("click", "#rstCrude", function () {
            $('#buttonPressed').val("ResetCrude");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("click", "#rstDensity", function () {
            $('#buttonPressed').val("ResetDensity");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("click", "#rstYield", function () {
            $('#buttonPressed').val("ResetYield");
            $("#modForm").submit();
        })
    });

    $(document).on("onload", "#fieldList", function () {
        current();
    });

    $(document).ready(function () {
        current();
    });

    function current() {
        $("#fieldList li a").each(function () {
            if ($(this).text() == $("#currFld").val()) {
                $(this).addClass('btn-field-selected');
            }
            if ($(this).text() == "*" + $("#currFld").val()) {
                $(this).addClass('btn-field-selected');
            }
        });
    }

    $(document).on('propertychange input paste', '#rate', function () {
        NeedRefresh();
    });

    $(document).on('change', '#ddlAppl', function () {
        NeedRefresh();
    });

    $(document).on('change', '#ddlRate', function () {
        NeedRefresh();
    });

    $(document).on('change', '#ddlFertRate', function () {
        NeedRefresh();
    });

    $(document).on('propertychange input paste', '#avail', function () {
        NeedRefresh();
    });

    $(document).on('propertychange input paste', '#nh4', function () {
        NeedRefresh();
    });

    $(document).on('change', '#crude', function () {
        NeedRefresh();
    });

    $(document).on('change', '#yieldByHarvestUnit', function () {
        NeedRefresh();
    });

    $(document).on('change', '#cropDesc', function () {
        NeedRefresh();
    });

    $(document).on('change', '#reqN', function () {
        NeedRefresh();
    });

    $(document).on('change', '#reqP', function () {
        NeedRefresh();
    });

    $(document).on('change', '#reqK', function () {
        NeedRefresh();
    });

    $(document).on('change', '#remN', function () {
        NeedRefresh();
    });

    $(document).on('change', '#remP', function () {
        NeedRefresh();
    });

    $(document).on('change', '#remK', function () {
        NeedRefresh();
    });

    $(document).on('change', '#coverYes', function () {
        NeedRefresh();
    });

    $(document).on('change', '#coverNo', function () {
        NeedRefresh();
    });

    $(document).on('change', '#density', function () {
        NeedRefresh();
    });

    $(document).on('change', '#valN', function () {
        NeedRefresh();
    });

    $(document).on('change', '#valP', function () {
        NeedRefresh();
    });

    $(document).on('change', '#valK', function () {
        NeedRefresh();
    });

    function NeedRefresh() {
        $("#ok_button").html('Calculate');
        $("#ok_button").css('background-color', '#1abbed');
        $("#btnText").val("Calculate");
    }

    function Intercept(x) {
        var unsaved = "False";
        var jqxhr = $.ajax({
            type: "GET",
            url: '@Url.Action("CheckUnsaved", "Nutrients")',
            data: '{}',
            async: false,
            cache: false,
            contentType: "application/json; charset=utf-8",
            dataType: "json"
            })
            .done(function (result) {
                unsaved = result.unsaved;
            })
            .fail(function (result) {
                unsaved = "False";
            });

        if (unsaved == "True")
        {
            $.ajaxSetup({ cache: false });
            var url = '@Url.Action("SaveWarning", "Nutrients", new { target = "zzz" })';
            $type = url.replace('zzz', x);
            $('#myModalContent').load($type, function () {
                $('#myModal').modal({
                    /*backdrop: 'static',*/
                    //keyboard: true
                }, 'show');
                bindFormW(this);
            });
            return false;
        }
        else
        {
            window.location.href = x;
        }
    }

    $(document).ready(function () {
        $("#NutrientsCalculate4").addClass('wizard-item-done');
    });

    $(document).on("click", '[data_modalI]', function (e) {
        $.ajaxSetup({ cache: false });
        $type = $(this).data('type'); // this works as of jQuery 1.4.3, otherwise $(this).attr('data-type');
        $("#divSize").removeClass("modal-large");
        $("#divSize").addClass("modal-carousel");
        $('#myModalContent').load($type, function () {
            $('#myModal').modal({
                /*backdrop: 'static',*/
                //keyboard: true
            }, 'show');
            bindFormI(this);
        });
        return false;
    });

    $(".modal").on("hidden.bs.modal", function () {
        $(".myModalContent").html("");
    });

    function bindFormI(dialog) {
        $('form', dialog).submit(function () {
            $.ajax({
                cache: false,
                url: this.action,
                type: this.method,
                data: $(this).serialize(),
                success: function (result) {
                    if (result.success) {
                        $('#myModal').modal('hide');
                    } else {
                        $('#myModalContent').html(result);
                        bindFormI(dialog);
                    }
                }
            });
            return false;
        });
        }

    $(document).ready(function () {
        $("#submenu").addClass('padding');
        $("#submenu-ul-fields").addClass('submenu-display');
        $("#submenu-ul-manure").addClass('submenu-display');
        });

    $(document).on("click",
        '[data_modal2]',
        function (e) {
            $.ajaxSetup({ cache: false });
            $type = $(this).data('type'); // this works as of jQuery 1.4.3, otherwise $(this).attr('data-type');
            $('#myModalContent').load($type,
                function () {
                    $('#myModal').modal({
                            /*backdrop: 'static',*/
                            //keyboard: true

                        },
                        'show');
                    bindForm2(this);
                });
            return false;
        });

    function bindForm2(dialog) {
        $('form', dialog).submit(function () {
            $.ajax({
                    cache: false,
                    url: this.action,
                    type: this.method,
                    data: $(this).serialize()
                })
                .done(function (result) {
                    if (result.success) {
                        $('#myModal').modal('hide');
                        //$(result.target).load(result.url); //  Load data from the server and place the returned HTML into the matched element
                        window.location.href = result.url;
                    } else {
                        $('#myModalContent').html(result);
                        bindForm2(dialog);
                    }
                });

            return false;
        });
        }
    </script>

}