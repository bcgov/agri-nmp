// <auto-generated />
using System;
using Agri.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Agri.Data.Migrations
{
    [DbContext(typeof(AgriConfigurationContext))]
    [Migration("20240802233644_CatchupModelUpdate")]
    partial class CatchupModelUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Agri.Models.Configuration.AmmoniaRetention", b =>
                {
                    b.Property<int>("SeasonApplicationId")
                        .HasColumnType("integer");

                    b.Property<int>("DryMatter")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<decimal?>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("SeasonApplicationId", "DryMatter", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("AmmoniaRetentions");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Animal", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UseSortOrder")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("Agri.Models.Configuration.AnimalSubType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("AnimalId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("LiquidPerGalPerAnimalPerDay")
                        .HasColumnType("decimal(16,4)");

                    b.Property<decimal>("MilkProduction")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("SolidLiquidSeparationPercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SolidPerGalPerAnimalPerDay")
                        .HasColumnType("decimal(16,4)");

                    b.Property<decimal?>("SolidPerPoundPerAnimalPerDay")
                        .HasColumnType("decimal(16,4)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<decimal>("WashWater")
                        .HasColumnType("numeric");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("AnimalId", "StaticDataVersionId");

                    b.ToTable("AnimalSubType");
                });

            modelBuilder.Entity("Agri.Models.Configuration.BCSampleDateForNitrateCredit", b =>
                {
                    b.Property<string>("CoastalFromDateMonth")
                        .HasColumnType("text");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("CoastalToDateMonth")
                        .HasColumnType("text");

                    b.Property<string>("InteriorFromDateMonth")
                        .HasColumnType("text");

                    b.Property<string>("InteriorToDateMonth")
                        .HasColumnType("text");

                    b.HasKey("CoastalFromDateMonth", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("BCSampleDateForNitrateCredit");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Breed", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("AnimalId")
                        .HasColumnType("integer");

                    b.Property<decimal>("BreedManureFactor")
                        .HasColumnType("numeric");

                    b.Property<string>("BreedName")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("AnimalId", "StaticDataVersionId");

                    b.ToTable("Breed");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Browser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("MinVersion")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Browsers");
                });

            modelBuilder.Entity("Agri.Models.Configuration.ConversionFactor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("DefaultApplicationOfManureInPrevYears")
                        .HasColumnType("text");

                    b.Property<int>("DefaultSoilTestKelownaPhosphorous")
                        .HasColumnType("integer");

                    b.Property<int>("DefaultSoilTestKelownaPotassium")
                        .HasColumnType("integer");

                    b.Property<decimal>("KilogramPerHectareToPoundPerAcreConversion")
                        .HasColumnType("numeric");

                    b.Property<decimal>("NitrogenProteinConversion")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PhosphorousAvailabilityFirstYear")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PhosphorousAvailabilityLongTerm")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PhosphorousPtoP2O5Conversion")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PotassiumAvailabilityFirstYear")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PotassiumAvailabilityLongTerm")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PotassiumKtoK2OConversion")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PoundPer1000FtSquaredToPoundPerAcreConversion")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PoundPerTonConversion")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SoilTestPPMToPoundPerAcre")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UnitConversion")
                        .HasColumnType("numeric");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("ConversionFactors");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Crop", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("CropName")
                        .HasColumnType("text");

                    b.Property<decimal?>("CropRemovalFactorK2O")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CropRemovalFactorNitrogen")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CropRemovalFactorP2O5")
                        .HasColumnType("numeric");

                    b.Property<int>("CropTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("HarvestBushelsPerTon")
                        .HasColumnType("numeric");

                    b.Property<int>("ManureApplicationHistory")
                        .HasColumnType("integer");

                    b.Property<decimal>("NitrogenRecommendationId")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("NitrogenRecommendationPoundPerAcre")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("NitrogenRecommendationUpperLimitPoundPerAcre")
                        .HasColumnType("numeric");

                    b.Property<int>("PreviousCropCode")
                        .HasColumnType("integer");

                    b.Property<int>("SortNumber")
                        .HasColumnType("integer");

                    b.Property<int>("YieldCd")
                        .HasColumnType("integer");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("CropTypeId", "StaticDataVersionId");

                    b.HasIndex("ManureApplicationHistory", "StaticDataVersionId");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("Agri.Models.Configuration.CropSoilTestPhosphorousRegion", b =>
                {
                    b.Property<int>("CropId")
                        .HasColumnType("integer");

                    b.Property<int>("SoilTestPhosphorousRegionCode")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int?>("PhosphorousCropGroupRegionCode")
                        .HasColumnType("integer");

                    b.HasKey("CropId", "SoilTestPhosphorousRegionCode", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("CropId", "StaticDataVersionId");

                    b.ToTable("CropSoilTestPhosphorousRegions");
                });

            modelBuilder.Entity("Agri.Models.Configuration.CropSoilTestPotassiumRegion", b =>
                {
                    b.Property<int>("CropId")
                        .HasColumnType("integer");

                    b.Property<int>("SoilTestPotassiumRegionCode")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int?>("PotassiumCropGroupRegionCode")
                        .HasColumnType("integer");

                    b.HasKey("CropId", "SoilTestPotassiumRegionCode", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("CropId", "StaticDataVersionId");

                    b.ToTable("CropSoilTestPotassiumRegions");
                });

            modelBuilder.Entity("Agri.Models.Configuration.CropType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<bool>("CoverCrop")
                        .HasColumnType("boolean");

                    b.Property<bool>("CrudeProteinRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("CustomCrop")
                        .HasColumnType("boolean");

                    b.Property<bool>("ModifyNitrogen")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("CropTypes");
                });

            modelBuilder.Entity("Agri.Models.Configuration.CropYield", b =>
                {
                    b.Property<int>("CropId")
                        .HasColumnType("integer");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.HasKey("CropId", "LocationId", "StaticDataVersionId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("CropId", "StaticDataVersionId");

                    b.ToTable("CropYields");
                });

            modelBuilder.Entity("Agri.Models.Configuration.DailyFeedRequirement", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("DailyFeedRequirements");
                });

            modelBuilder.Entity("Agri.Models.Configuration.DefaultSoilTest", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("ConvertedKelownaK")
                        .HasColumnType("integer");

                    b.Property<int>("ConvertedKelownaP")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultSoilTestMethodId")
                        .HasColumnType("text");

                    b.Property<decimal>("Nitrogen")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Phosphorous")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Potassium")
                        .HasColumnType("numeric");

                    b.Property<decimal>("pH")
                        .HasColumnType("numeric");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("DefaultSoilTests");
                });

            modelBuilder.Entity("Agri.Models.Configuration.DensityUnit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<decimal>("ConvFactor")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("DensityUnits");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Depth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Depths");
                });

            modelBuilder.Entity("Agri.Models.Configuration.DryMatter", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("DryMatters");
                });

            modelBuilder.Entity("Agri.Models.Configuration.ExternalLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExternalLinks");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Feed", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<decimal?>("CPPercent")
                        .HasColumnType("decimal(16,4)");

                    b.Property<int>("FeedForageTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("GetFeedForageTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("GetFeedForageTypeStaticDataVersionId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("PhosphorousPercent")
                        .HasColumnType("decimal(16,4)");

                    b.Property<decimal?>("PotassiumPercent")
                        .HasColumnType("decimal(16,4)");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("GetFeedForageTypeId", "GetFeedForageTypeStaticDataVersionId");

                    b.ToTable("Feeds");
                });

            modelBuilder.Entity("Agri.Models.Configuration.FeedConsumption", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("FeedConsumptions");
                });

            modelBuilder.Entity("Agri.Models.Configuration.FeedEfficiency", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .HasColumnType("integer");

                    b.Property<string>("AnimalType")
                        .HasColumnType("text");

                    b.Property<decimal>("Nitrogen")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Phosphorous")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Potassium")
                        .HasColumnType("numeric");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("FeedEfficiencies");
                });

            modelBuilder.Entity("Agri.Models.Configuration.FeedForageType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("FeedForageTypes");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Fertilizer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("DryLiquid")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Nitrogen")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Phosphorous")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Potassium")
                        .HasColumnType("numeric");

                    b.Property<int>("SortNum")
                        .HasColumnType("integer");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("Fertilizers");
                });

            modelBuilder.Entity("Agri.Models.Configuration.FertilizerMethod", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("FertilizerMethods");
                });

            modelBuilder.Entity("Agri.Models.Configuration.FertilizerType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<bool>("Custom")
                        .HasColumnType("boolean");

                    b.Property<string>("DryLiquid")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("FertilizerTypes");
                });

            modelBuilder.Entity("Agri.Models.Configuration.FertilizerUnit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<decimal>("ConversionToImperialGallonsPerAcre")
                        .HasColumnType("numeric");

                    b.Property<string>("DryLiquid")
                        .HasColumnType("text");

                    b.Property<decimal>("FarmRequiredNutrientsStdUnitsAreaConversion")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FarmRequiredNutrientsStdUnitsConversion")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("FertilizerUnits");
                });

            modelBuilder.Entity("Agri.Models.Configuration.HarvestUnit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("HarvestUnits");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Journey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Journey", (string)null);
                });

            modelBuilder.Entity("Agri.Models.Configuration.LiquidFertilizerDensity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("DensityUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("FertilizerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("DensityUnitId", "StaticDataVersionId");

                    b.HasIndex("FertilizerId", "StaticDataVersionId");

                    b.ToTable("LiquidFertilizerDensities");
                });

            modelBuilder.Entity("Agri.Models.Configuration.LiquidMaterialApplicationUSGallonsPerAcreRateConversion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("ApplicationRateUnit")
                        .HasColumnType("integer");

                    b.Property<string>("ApplicationRateUnitName")
                        .HasColumnType("text");

                    b.Property<decimal>("USGallonsPerAcreConversion")
                        .HasColumnType("numeric");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("LiquidMaterialApplicationUsGallonsPerAcreRateConversions");
                });

            modelBuilder.Entity("Agri.Models.Configuration.LiquidMaterialsConversionFactor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("InputUnit")
                        .HasColumnType("integer");

                    b.Property<string>("InputUnitName")
                        .HasColumnType("text");

                    b.Property<decimal>("USGallonsOutput")
                        .HasColumnType("numeric");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("LiquidMaterialsConversionFactors");
                });

            modelBuilder.Entity("Agri.Models.Configuration.LiquidSolidSeparationDefault", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("PercentOfLiquidSeparation")
                        .HasColumnType("integer");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("LiquidSolidSeparationDefaults");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Agri.Models.Configuration.MainMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("Controller")
                        .HasColumnType("text");

                    b.Property<int>("JourneyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NextAction")
                        .HasColumnType("text");

                    b.Property<string>("NextController")
                        .HasColumnType("text");

                    b.Property<string>("NextPage")
                        .HasColumnType("text");

                    b.Property<string>("Page")
                        .HasColumnType("text");

                    b.Property<string>("PreviousAction")
                        .HasColumnType("text");

                    b.Property<string>("PreviousController")
                        .HasColumnType("text");

                    b.Property<string>("PreviousPage")
                        .HasColumnType("text");

                    b.Property<int>("SortNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("UseJavaScriptInterceptMethod")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("JourneyId");

                    b.ToTable("MainMenus");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Manure", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("Ammonia")
                        .HasColumnType("integer");

                    b.Property<decimal>("CubicYardConversion")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DefaultSolidMoisture")
                        .HasColumnType("numeric");

                    b.Property<int>("DryMatterId")
                        .HasColumnType("integer");

                    b.Property<string>("ManureClass")
                        .HasColumnType("text");

                    b.Property<string>("Moisture")
                        .HasColumnType("text");

                    b.Property<int>("NMineralizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Nitrate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Nitrogen")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Phosphorous")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Potassium")
                        .HasColumnType("numeric");

                    b.Property<string>("SolidLiquid")
                        .HasColumnType("text");

                    b.Property<int>("SortNum")
                        .HasColumnType("integer");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("DryMatterId", "StaticDataVersionId");

                    b.ToTable("Manures");
                });

            modelBuilder.Entity("Agri.Models.Configuration.ManureImportedDefault", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<decimal>("DefaultSolidMoisture")
                        .HasColumnType("numeric");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("ManureImportedDefaults");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Message", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("Balance1High")
                        .HasColumnType("integer");

                    b.Property<int>("Balance1Low")
                        .HasColumnType("integer");

                    b.Property<int>("BalanceHigh")
                        .HasColumnType("integer");

                    b.Property<int>("BalanceLow")
                        .HasColumnType("integer");

                    b.Property<string>("BalanceType")
                        .HasColumnType("text");

                    b.Property<string>("DisplayMessage")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<decimal>("SoilTestHigh")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SoilTestLow")
                        .HasColumnType("numeric");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Agri.Models.Configuration.MiniApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MiniApps");
                });

            modelBuilder.Entity("Agri.Models.Configuration.MiniAppLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LabelText")
                        .HasColumnType("text");

                    b.Property<int>("MiniAppId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MiniAppId");

                    b.ToTable("MiniAppLabels");
                });

            modelBuilder.Entity("Agri.Models.Configuration.NitrateCreditSampleDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("FromDateMonth")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("ToDateMonth")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("NitrateCreditSampleDates");
                });

            modelBuilder.Entity("Agri.Models.Configuration.NitrogenMineralization", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<decimal>("FirstYearValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LongTermValue")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id", "LocationId", "StaticDataVersionId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("NitrogenMineralizations");
                });

            modelBuilder.Entity("Agri.Models.Configuration.NitrogenRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("RecommendationDesc")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("NitrogenRecommendations");
                });

            modelBuilder.Entity("Agri.Models.Configuration.NutrientIcon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NutrientIcons");
                });

            modelBuilder.Entity("Agri.Models.Configuration.PhosphorusSoilTestRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("LowerLimit")
                        .HasColumnType("integer");

                    b.Property<string>("Rating")
                        .HasColumnType("text");

                    b.Property<int>("UpperLimit")
                        .HasColumnType("integer");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("PhosphorusSoilTestRanges");
                });

            modelBuilder.Entity("Agri.Models.Configuration.PotassiumSoilTestRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("LowerLimit")
                        .HasColumnType("integer");

                    b.Property<string>("Rating")
                        .HasColumnType("text");

                    b.Property<int>("UpperLimit")
                        .HasColumnType("integer");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("PotassiumSoilTestRanges");
                });

            modelBuilder.Entity("Agri.Models.Configuration.PreviousCropType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("CropId")
                        .HasColumnType("integer");

                    b.Property<int?>("CropTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("CropTypeStaticDataVersionId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NitrogenCreditImperial")
                        .HasColumnType("integer");

                    b.Property<int>("NitrogenCreditMetric")
                        .HasColumnType("integer");

                    b.Property<int>("PreviousCropCode")
                        .HasColumnType("integer");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("CropTypeId", "CropTypeStaticDataVersionId");

                    b.HasIndex("CropId", "PreviousCropCode", "StaticDataVersionId");

                    b.ToTable("PreviousCropType");
                });

            modelBuilder.Entity("Agri.Models.Configuration.PreviousManureApplicationYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("FieldManureApplicationHistory")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("PrevManureApplicationYears");
                });

            modelBuilder.Entity("Agri.Models.Configuration.PreviousYearManureApplicationNitrogenDefault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int[]>("DefaultNitrogenCredit")
                        .HasColumnType("integer[]");

                    b.Property<int>("FieldManureApplicationHistory")
                        .HasColumnType("integer");

                    b.Property<string>("PreviousYearManureAplicationFrequency")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("PrevYearManureApplicationNitrogenDefaults");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Region", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SoilTestPhosphorousRegionCd")
                        .HasColumnType("integer");

                    b.Property<int>("SoilTestPotassiumRegionCd")
                        .HasColumnType("integer");

                    b.Property<int>("SortNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Agri.Models.Configuration.RptCompletedFertilizerRequiredStdUnit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("LiquidUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("SolidUnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("RptCompletedFertilizerRequiredStdUnits");
                });

            modelBuilder.Entity("Agri.Models.Configuration.RptCompletedManureRequiredStdUnit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("LiquidUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("SolidUnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("RptCompletedManureRequiredStdUnits");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SeasonApplication", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("ApplicationMethod")
                        .HasColumnType("text");

                    b.Property<string>("Compost")
                        .HasColumnType("text");

                    b.Property<decimal>("DryMatter1To5Percent")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DryMatter5To10Percent")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DryMatterGreaterThan10Percent")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DryMatterLessThan1Percent")
                        .HasColumnType("numeric");

                    b.Property<string>("ManureType")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PoultrySolid")
                        .HasColumnType("text");

                    b.Property<string>("Season")
                        .HasColumnType("text");

                    b.Property<int>("SortNum")
                        .HasColumnType("integer");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("SeasonApplications");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestMethod", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<decimal>("ConvertToKelownaK")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ConvertToKelownaPHGreaterThanEqual72")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ConvertToKelownaPHLessThan72")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SortNum")
                        .HasColumnType("integer");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("SoilTestMethods");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPhosphorousKelownaRange", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Range")
                        .HasColumnType("text");

                    b.Property<int>("RangeHigh")
                        .HasColumnType("integer");

                    b.Property<int>("RangeLow")
                        .HasColumnType("integer");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("SoilTestPhosphorousKelownaRanges");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPhosphorousRecommendation", b =>
                {
                    b.Property<int>("SoilTestPhosphorousKelownaRangeId")
                        .HasColumnType("integer");

                    b.Property<int>("SoilTestPhosphorousRegionCode")
                        .HasColumnType("integer");

                    b.Property<int>("PhosphorousCropGroupRegionCode")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("P2O5RecommendationKilogramPerHectare")
                        .HasColumnType("integer");

                    b.HasKey("SoilTestPhosphorousKelownaRangeId", "SoilTestPhosphorousRegionCode", "PhosphorousCropGroupRegionCode", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("SoilTestPhosphorousKelownaRangeId", "StaticDataVersionId");

                    b.ToTable("SoilTestPhosphorousRecommendation");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPhosphorusRange", b =>
                {
                    b.Property<int>("UpperLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Rating")
                        .HasColumnType("text");

                    b.HasKey("UpperLimit", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("SoilTestPhosphorusRanges");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPotassiumKelownaRange", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Range")
                        .HasColumnType("text");

                    b.Property<int>("RangeHigh")
                        .HasColumnType("integer");

                    b.Property<int>("RangeLow")
                        .HasColumnType("integer");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("SoilTestPotassiumKelownaRanges");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPotassiumRange", b =>
                {
                    b.Property<int>("UpperLimit")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Rating")
                        .HasColumnType("text");

                    b.HasKey("UpperLimit", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("SoilTestPotassiumRanges");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPotassiumRecommendation", b =>
                {
                    b.Property<int>("SoilTestPotassiumKelownaRangeId")
                        .HasColumnType("integer");

                    b.Property<int>("SoilTestPotassiumRegionCode")
                        .HasColumnType("integer");

                    b.Property<int>("PotassiumCropGroupRegionCode")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("K2ORecommendationKilogramPerHectare")
                        .HasColumnType("integer");

                    b.HasKey("SoilTestPotassiumKelownaRangeId", "SoilTestPotassiumRegionCode", "PotassiumCropGroupRegionCode", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("SoilTestPotassiumKelownaRangeId", "StaticDataVersionId");

                    b.ToTable("SoilTestPotassiumRecommendation");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SolidMaterialApplicationTonPerAcreRateConversion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("ApplicationRateUnit")
                        .HasColumnType("integer");

                    b.Property<string>("ApplicationRateUnitName")
                        .HasColumnType("text");

                    b.Property<string>("TonsPerAcreConversion")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("SolidMaterialApplicationTonPerAcreRateConversions");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SolidMaterialsConversionFactor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("CubicMetersOutput")
                        .HasColumnType("text");

                    b.Property<string>("CubicYardsOutput")
                        .HasColumnType("text");

                    b.Property<int>("InputUnit")
                        .HasColumnType("integer");

                    b.Property<string>("InputUnitName")
                        .HasColumnType("text");

                    b.Property<string>("MetricTonsOutput")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("SolidMaterialsConversionFactors");
                });

            modelBuilder.Entity("Agri.Models.Configuration.StaticDataVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("VARCHAR(4000)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.ToTable("StaticDataVersions");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SubMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("Controller")
                        .HasColumnType("text");

                    b.Property<int>("MainMenuId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NextAction")
                        .HasColumnType("text");

                    b.Property<string>("NextController")
                        .HasColumnType("text");

                    b.Property<string>("NextPage")
                        .HasColumnType("text");

                    b.Property<string>("Page")
                        .HasColumnType("text");

                    b.Property<string>("PreviousAction")
                        .HasColumnType("text");

                    b.Property<string>("PreviousController")
                        .HasColumnType("text");

                    b.Property<string>("PreviousPage")
                        .HasColumnType("text");

                    b.Property<int>("SortNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("UseJavaScriptInterceptMethod")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("MainMenuId");

                    b.ToTable("SubMenu");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SubRegion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("AnnualPrecipitation")
                        .HasColumnType("integer");

                    b.Property<int>("AnnualPrecipitationOctToMar")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("RegionId", "StaticDataVersionId");

                    b.ToTable("SubRegion");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Unit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<decimal>("ConversionlbTon")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CostApplications")
                        .HasColumnType("numeric");

                    b.Property<string>("CostUnits")
                        .HasColumnType("text");

                    b.Property<string>("DollarUnitArea")
                        .HasColumnType("text");

                    b.Property<decimal>("FarmReqdNutrientsStdUnitsAreaConversion")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FarmReqdNutrientsStdUnitsConversion")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NutrientContentUnits")
                        .HasColumnType("text");

                    b.Property<string>("NutrientRateUnits")
                        .HasColumnType("text");

                    b.Property<string>("SolidLiquid")
                        .HasColumnType("text");

                    b.Property<decimal>("ValueK2O")
                        .HasColumnType("numeric");

                    b.Property<string>("ValueMaterialUnits")
                        .HasColumnType("text");

                    b.Property<decimal>("ValueN")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ValueP2O5")
                        .HasColumnType("numeric");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Agri.Models.Configuration.UserPrompt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("UserJourney")
                        .HasColumnType("text");

                    b.Property<string>("UserPromptPage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UserPrompts");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Yield", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("YieldDesc")
                        .HasColumnType("text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("Yields");
                });

            modelBuilder.Entity("Agri.Models.Security.ManageVersionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("ManageVersionUsers");
                });

            modelBuilder.Entity("Agri.Models.Configuration.AmmoniaRetention", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("AmmoniaRetentions")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Animal", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Animals")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.AnimalSubType", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("AnimalSubTypes")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.Animal", "Animal")
                        .WithMany("AnimalSubTypes")
                        .HasForeignKey("AnimalId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.BCSampleDateForNitrateCredit", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("BCSampleDateForNitrateCredits")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Breed", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Breeds")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.Animal", "Animal")
                        .WithMany("Breeds")
                        .HasForeignKey("AnimalId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.ConversionFactor", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("ConversionFactors")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Crop", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Crops")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.CropType", "CropType")
                        .WithMany("Crops")
                        .HasForeignKey("CropTypeId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.PreviousYearManureApplicationNitrogenDefault", "PreviousYearManureApplicationNitrogenDefault")
                        .WithMany("Crops")
                        .HasForeignKey("ManureApplicationHistory", "StaticDataVersionId")
                        .HasPrincipalKey("FieldManureApplicationHistory", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CropType");

                    b.Navigation("PreviousYearManureApplicationNitrogenDefault");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.CropSoilTestPhosphorousRegion", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("CropSoilTestPhosphorousRegions")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.Crop", "Crop")
                        .WithMany("CropSoilTestPhosphorousRegions")
                        .HasForeignKey("CropId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.CropSoilTestPotassiumRegion", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("CropSoilTestPotassiumRegions")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.Crop", "Crop")
                        .WithMany("CropSoilTestPotassiumRegions")
                        .HasForeignKey("CropId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.CropType", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("CropTypes")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.CropYield", b =>
                {
                    b.HasOne("Agri.Models.Configuration.Location", "Location")
                        .WithMany("CropYields")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("CropYields")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.Crop", "Crop")
                        .WithMany("CropYields")
                        .HasForeignKey("CropId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("Location");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.DailyFeedRequirement", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("DailyFeedRequirements")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.DefaultSoilTest", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("DefaultSoilTests")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.DensityUnit", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("DensityUnits")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.DryMatter", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("DryMatters")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Feed", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Feeds")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.FeedForageType", "GetFeedForageType")
                        .WithMany("Feeds")
                        .HasForeignKey("GetFeedForageTypeId", "GetFeedForageTypeStaticDataVersionId");

                    b.Navigation("GetFeedForageType");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.FeedConsumption", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("FeedConsumptions")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.FeedEfficiency", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("FeedEfficiencies")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.FeedForageType", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("FeedForageTypes")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Fertilizer", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Fertilizers")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.FertilizerMethod", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("FertilizerMethods")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.FertilizerType", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("FertilizerTypes")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.FertilizerUnit", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("FertilizerUnits")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.HarvestUnit", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("HarvestUnits")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.LiquidFertilizerDensity", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("LiquidFertilizerDensities")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.DensityUnit", "DensityUnit")
                        .WithMany("LiquidFertilizerDensities")
                        .HasForeignKey("DensityUnitId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.Fertilizer", "Fertilizer")
                        .WithMany("LiquidFertilizerDensities")
                        .HasForeignKey("FertilizerId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DensityUnit");

                    b.Navigation("Fertilizer");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.LiquidMaterialApplicationUSGallonsPerAcreRateConversion", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("LiquidMaterialApplicationUsGallonsPerAcreRateConversions")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.LiquidMaterialsConversionFactor", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("LiquidMaterialsConversionFactors")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.LiquidSolidSeparationDefault", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("LiquidSolidSeparationDefaults")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.MainMenu", b =>
                {
                    b.HasOne("Agri.Models.Configuration.Journey", "Journey")
                        .WithMany("MainMenus")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Manure", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Manures")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.DryMatter", "DryMatter")
                        .WithMany("Manures")
                        .HasForeignKey("DryMatterId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DryMatter");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.ManureImportedDefault", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("ManureImportedDefaults")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Message", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Messages")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.MiniAppLabel", b =>
                {
                    b.HasOne("Agri.Models.Configuration.MiniApp", "MiniApp")
                        .WithMany("MiniAppLabels")
                        .HasForeignKey("MiniAppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MiniApp");
                });

            modelBuilder.Entity("Agri.Models.Configuration.NitrateCreditSampleDate", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("NitrateCreditSampleDates")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.NitrogenMineralization", b =>
                {
                    b.HasOne("Agri.Models.Configuration.Location", "Location")
                        .WithMany("NitrogenMineralizations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("NitrogenMineralizations")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.NitrogenRecommendation", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("NitrogenRecommendations")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.PhosphorusSoilTestRange", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("PhosphorusSoilTestRanges")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.PotassiumSoilTestRange", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("PotassiumSoilTestRanges")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.PreviousCropType", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("PreviousCropTypes")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.CropType", null)
                        .WithMany("PrevCropTypes")
                        .HasForeignKey("CropTypeId", "CropTypeStaticDataVersionId");

                    b.HasOne("Agri.Models.Configuration.Crop", "Crop")
                        .WithMany("PreviousCropTypes")
                        .HasForeignKey("CropId", "PreviousCropCode", "StaticDataVersionId")
                        .HasPrincipalKey("Id", "PreviousCropCode", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.PreviousManureApplicationYear", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("PrevManureApplicationYears")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.PreviousYearManureApplicationNitrogenDefault", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("PrevYearManureApplicationNitrogenDefaults")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.PreviousManureApplicationYear", "PreviousManureApplicationYear")
                        .WithMany("PreviousYearManureApplicationNitrogenDefaults")
                        .HasForeignKey("FieldManureApplicationHistory", "StaticDataVersionId")
                        .HasPrincipalKey("FieldManureApplicationHistory", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreviousManureApplicationYear");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Region", b =>
                {
                    b.HasOne("Agri.Models.Configuration.Location", "Location")
                        .WithMany("Regions")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Regions")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.RptCompletedFertilizerRequiredStdUnit", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("RptCompletedFertilizerRequiredStdUnits")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.RptCompletedManureRequiredStdUnit", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("RptCompletedManureRequiredStdUnits")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SeasonApplication", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SeasonApplications")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestMethod", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SoilTestMethods")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPhosphorousKelownaRange", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SoilTestPhosphorousKelownaRanges")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPhosphorousRecommendation", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SoilTestPhosphorousRecommendations")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.SoilTestPhosphorousKelownaRange", "SoilTestPhosphorousKelownaRange")
                        .WithMany("SoilTestPhosphorousRecommendations")
                        .HasForeignKey("SoilTestPhosphorousKelownaRangeId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoilTestPhosphorousKelownaRange");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPhosphorusRange", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SoilTestPhosphorusRanges")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPotassiumKelownaRange", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SoilTestPotassiumKelownaRanges")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPotassiumRange", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SoilTestPotassiumRanges")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPotassiumRecommendation", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SoilTestPotassiumRecommendations")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.SoilTestPotassiumKelownaRange", "SoilTestPotassiumKelownaRange")
                        .WithMany("SoilTestPotassiumRecommendations")
                        .HasForeignKey("SoilTestPotassiumKelownaRangeId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoilTestPotassiumKelownaRange");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SolidMaterialApplicationTonPerAcreRateConversion", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SolidMaterialApplicationTonPerAcreRateConversions")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SolidMaterialsConversionFactor", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SolidMaterialsConversionFactors")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SubMenu", b =>
                {
                    b.HasOne("Agri.Models.Configuration.MainMenu", "MainMenu")
                        .WithMany("SubMenus")
                        .HasForeignKey("MainMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainMenu");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SubRegion", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SubRegions")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agri.Models.Configuration.Region", "Region")
                        .WithMany("SubRegions")
                        .HasForeignKey("RegionId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Unit", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Units")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Yield", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Yields")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Animal", b =>
                {
                    b.Navigation("AnimalSubTypes");

                    b.Navigation("Breeds");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Crop", b =>
                {
                    b.Navigation("CropSoilTestPhosphorousRegions");

                    b.Navigation("CropSoilTestPotassiumRegions");

                    b.Navigation("CropYields");

                    b.Navigation("PreviousCropTypes");
                });

            modelBuilder.Entity("Agri.Models.Configuration.CropType", b =>
                {
                    b.Navigation("Crops");

                    b.Navigation("PrevCropTypes");
                });

            modelBuilder.Entity("Agri.Models.Configuration.DensityUnit", b =>
                {
                    b.Navigation("LiquidFertilizerDensities");
                });

            modelBuilder.Entity("Agri.Models.Configuration.DryMatter", b =>
                {
                    b.Navigation("Manures");
                });

            modelBuilder.Entity("Agri.Models.Configuration.FeedForageType", b =>
                {
                    b.Navigation("Feeds");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Fertilizer", b =>
                {
                    b.Navigation("LiquidFertilizerDensities");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Journey", b =>
                {
                    b.Navigation("MainMenus");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Location", b =>
                {
                    b.Navigation("CropYields");

                    b.Navigation("NitrogenMineralizations");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Agri.Models.Configuration.MainMenu", b =>
                {
                    b.Navigation("SubMenus");
                });

            modelBuilder.Entity("Agri.Models.Configuration.MiniApp", b =>
                {
                    b.Navigation("MiniAppLabels");
                });

            modelBuilder.Entity("Agri.Models.Configuration.PreviousManureApplicationYear", b =>
                {
                    b.Navigation("PreviousYearManureApplicationNitrogenDefaults");
                });

            modelBuilder.Entity("Agri.Models.Configuration.PreviousYearManureApplicationNitrogenDefault", b =>
                {
                    b.Navigation("Crops");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Region", b =>
                {
                    b.Navigation("SubRegions");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPhosphorousKelownaRange", b =>
                {
                    b.Navigation("SoilTestPhosphorousRecommendations");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPotassiumKelownaRange", b =>
                {
                    b.Navigation("SoilTestPotassiumRecommendations");
                });

            modelBuilder.Entity("Agri.Models.Configuration.StaticDataVersion", b =>
                {
                    b.Navigation("AmmoniaRetentions");

                    b.Navigation("AnimalSubTypes");

                    b.Navigation("Animals");

                    b.Navigation("BCSampleDateForNitrateCredits");

                    b.Navigation("Breeds");

                    b.Navigation("ConversionFactors");

                    b.Navigation("CropSoilTestPhosphorousRegions");

                    b.Navigation("CropSoilTestPotassiumRegions");

                    b.Navigation("CropTypes");

                    b.Navigation("CropYields");

                    b.Navigation("Crops");

                    b.Navigation("DailyFeedRequirements");

                    b.Navigation("DefaultSoilTests");

                    b.Navigation("DensityUnits");

                    b.Navigation("DryMatters");

                    b.Navigation("FeedConsumptions");

                    b.Navigation("FeedEfficiencies");

                    b.Navigation("FeedForageTypes");

                    b.Navigation("Feeds");

                    b.Navigation("FertilizerMethods");

                    b.Navigation("FertilizerTypes");

                    b.Navigation("FertilizerUnits");

                    b.Navigation("Fertilizers");

                    b.Navigation("HarvestUnits");

                    b.Navigation("LiquidFertilizerDensities");

                    b.Navigation("LiquidMaterialApplicationUsGallonsPerAcreRateConversions");

                    b.Navigation("LiquidMaterialsConversionFactors");

                    b.Navigation("LiquidSolidSeparationDefaults");

                    b.Navigation("ManureImportedDefaults");

                    b.Navigation("Manures");

                    b.Navigation("Messages");

                    b.Navigation("NitrateCreditSampleDates");

                    b.Navigation("NitrogenMineralizations");

                    b.Navigation("NitrogenRecommendations");

                    b.Navigation("PhosphorusSoilTestRanges");

                    b.Navigation("PotassiumSoilTestRanges");

                    b.Navigation("PrevManureApplicationYears");

                    b.Navigation("PrevYearManureApplicationNitrogenDefaults");

                    b.Navigation("PreviousCropTypes");

                    b.Navigation("Regions");

                    b.Navigation("RptCompletedFertilizerRequiredStdUnits");

                    b.Navigation("RptCompletedManureRequiredStdUnits");

                    b.Navigation("SeasonApplications");

                    b.Navigation("SoilTestMethods");

                    b.Navigation("SoilTestPhosphorousKelownaRanges");

                    b.Navigation("SoilTestPhosphorousRecommendations");

                    b.Navigation("SoilTestPhosphorusRanges");

                    b.Navigation("SoilTestPotassiumKelownaRanges");

                    b.Navigation("SoilTestPotassiumRanges");

                    b.Navigation("SoilTestPotassiumRecommendations");

                    b.Navigation("SolidMaterialApplicationTonPerAcreRateConversions");

                    b.Navigation("SolidMaterialsConversionFactors");

                    b.Navigation("SubRegions");

                    b.Navigation("Units");

                    b.Navigation("Yields");
                });
#pragma warning restore 612, 618
        }
    }
}
