// <auto-generated />
using System;
using Agri.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Agri.Data.Migrations
{
    [DbContext(typeof(AgriConfigurationContext))]
    [Migration("20191222182629_MiniAppTables")]
    partial class MiniAppTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Agri.Models.Configuration.AmmoniaRetention", b =>
                {
                    b.Property<int>("SeasonApplicationId");

                    b.Property<int>("DryMatter");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<decimal?>("Value");

                    b.HasKey("SeasonApplicationId", "DryMatter", "StaticDataVersionId");

                    b.HasAlternateKey("DryMatter", "SeasonApplicationId", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("AmmoniaRetentions");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Animal", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("Name");

                    b.Property<string>("UseSortOrder");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("Agri.Models.Configuration.AnimalSubType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("AnimalId");

                    b.Property<decimal?>("LiquidPerGalPerAnimalPerDay")
                        .HasColumnType("decimal(16,4)");

                    b.Property<decimal>("MilkProduction");

                    b.Property<string>("Name");

                    b.Property<decimal>("SolidLiquidSeparationPercentage");

                    b.Property<decimal?>("SolidPerGalPerAnimalPerDay")
                        .HasColumnType("decimal(16,4)");

                    b.Property<decimal?>("SolidPerPoundPerAnimalPerDay")
                        .HasColumnType("decimal(16,4)");

                    b.Property<int>("SortOrder");

                    b.Property<decimal>("WashWater");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("AnimalId", "StaticDataVersionId");

                    b.ToTable("AnimalSubType");
                });

            modelBuilder.Entity("Agri.Models.Configuration.BCSampleDateForNitrateCredit", b =>
                {
                    b.Property<string>("CoastalFromDateMonth");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("CoastalToDateMonth");

                    b.Property<string>("InteriorFromDateMonth");

                    b.Property<string>("InteriorToDateMonth");

                    b.HasKey("CoastalFromDateMonth", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("BCSampleDateForNitrateCredit");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Breed", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("AnimalId");

                    b.Property<decimal>("BreedManureFactor");

                    b.Property<string>("BreedName");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("AnimalId", "StaticDataVersionId");

                    b.ToTable("Breed");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Browser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MinVersion");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Browsers");
                });

            modelBuilder.Entity("Agri.Models.Configuration.ConversionFactor", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("DefaultApplicationOfManureInPrevYears");

                    b.Property<int>("DefaultSoilTestKelownaPhosphorous");

                    b.Property<int>("DefaultSoilTestKelownaPotassium");

                    b.Property<decimal>("KilogramPerHectareToPoundPerAcreConversion");

                    b.Property<decimal>("NitrogenProteinConversion");

                    b.Property<decimal>("PhosphorousAvailabilityFirstYear");

                    b.Property<decimal>("PhosphorousAvailabilityLongTerm");

                    b.Property<decimal>("PhosphorousPtoP2O5Conversion");

                    b.Property<decimal>("PotassiumAvailabilityFirstYear");

                    b.Property<decimal>("PotassiumAvailabilityLongTerm");

                    b.Property<decimal>("PotassiumKtoK2OConversion");

                    b.Property<decimal>("PoundPer1000FtSquaredToPoundPerAcreConversion");

                    b.Property<decimal>("PoundPerTonConversion");

                    b.Property<decimal>("SoilTestPPMToPoundPerAcre");

                    b.Property<decimal>("UnitConversion");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("ConversionFactors");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Crop", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("CropName");

                    b.Property<decimal?>("CropRemovalFactorK2O");

                    b.Property<decimal?>("CropRemovalFactorNitrogen");

                    b.Property<decimal?>("CropRemovalFactorP2O5");

                    b.Property<int>("CropTypeId");

                    b.Property<decimal?>("HarvestBushelsPerTon");

                    b.Property<int>("ManureApplicationHistory");

                    b.Property<decimal>("NitrogenRecommendationId");

                    b.Property<decimal?>("NitrogenRecommendationPoundPerAcre");

                    b.Property<decimal?>("NitrogenRecommendationUpperLimitPoundPerAcre");

                    b.Property<int>("PreviousCropCode");

                    b.Property<int>("SortNumber");

                    b.Property<int>("YieldCd");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("CropTypeId", "StaticDataVersionId");

                    b.HasIndex("ManureApplicationHistory", "StaticDataVersionId");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("Agri.Models.Configuration.CropSoilTestPhosphorousRegion", b =>
                {
                    b.Property<int>("CropId");

                    b.Property<int>("SoilTestPhosphorousRegionCode");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int?>("PhosphorousCropGroupRegionCode");

                    b.HasKey("CropId", "SoilTestPhosphorousRegionCode", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("CropId", "StaticDataVersionId");

                    b.ToTable("CropSoilTestPhosphorousRegions");
                });

            modelBuilder.Entity("Agri.Models.Configuration.CropSoilTestPotassiumRegion", b =>
                {
                    b.Property<int>("CropId");

                    b.Property<int>("SoilTestPotassiumRegionCode");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int?>("PotassiumCropGroupRegionCode");

                    b.HasKey("CropId", "SoilTestPotassiumRegionCode", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("CropId", "StaticDataVersionId");

                    b.ToTable("CropSoilTestPotassiumRegions");
                });

            modelBuilder.Entity("Agri.Models.Configuration.CropType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<bool>("CoverCrop");

                    b.Property<bool>("CrudeProteinRequired");

                    b.Property<bool>("CustomCrop");

                    b.Property<bool>("ModifyNitrogen");

                    b.Property<string>("Name");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("CropTypes");
                });

            modelBuilder.Entity("Agri.Models.Configuration.CropYield", b =>
                {
                    b.Property<int>("CropId");

                    b.Property<int>("LocationId");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<decimal?>("Amount");

                    b.HasKey("CropId", "LocationId", "StaticDataVersionId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("CropId", "StaticDataVersionId");

                    b.ToTable("CropYields");
                });

            modelBuilder.Entity("Agri.Models.Configuration.DefaultSoilTest", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("ConvertedKelownaK");

                    b.Property<int>("ConvertedKelownaP");

                    b.Property<string>("DefaultSoilTestMethodId");

                    b.Property<decimal>("Nitrogen");

                    b.Property<decimal>("Phosphorous");

                    b.Property<decimal>("Potassium");

                    b.Property<decimal>("pH");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("DefaultSoilTests");
                });

            modelBuilder.Entity("Agri.Models.Configuration.DensityUnit", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<decimal>("ConvFactor");

                    b.Property<string>("Name");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("DensityUnits");
                });

            modelBuilder.Entity("Agri.Models.Configuration.DryMatter", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("Name");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("DryMatters");
                });

            modelBuilder.Entity("Agri.Models.Configuration.ExternalLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("ExternalLinks");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Fertilizer", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("DryLiquid");

                    b.Property<string>("Name");

                    b.Property<decimal>("Nitrogen");

                    b.Property<decimal>("Phosphorous");

                    b.Property<decimal>("Potassium");

                    b.Property<int>("SortNum");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("Fertilizers");
                });

            modelBuilder.Entity("Agri.Models.Configuration.FertilizerMethod", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("Name");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("FertilizerMethods");
                });

            modelBuilder.Entity("Agri.Models.Configuration.FertilizerType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<bool>("Custom");

                    b.Property<string>("DryLiquid");

                    b.Property<string>("Name");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("FertilizerTypes");
                });

            modelBuilder.Entity("Agri.Models.Configuration.FertilizerUnit", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<decimal>("ConversionToImperialGallonsPerAcre");

                    b.Property<string>("DryLiquid");

                    b.Property<decimal>("FarmRequiredNutrientsStdUnitsAreaConversion");

                    b.Property<decimal>("FarmRequiredNutrientsStdUnitsConversion");

                    b.Property<string>("Name");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("FertilizerUnits");
                });

            modelBuilder.Entity("Agri.Models.Configuration.HarvestUnit", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("Name");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("HarvestUnits");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Journey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Journey");
                });

            modelBuilder.Entity("Agri.Models.Configuration.LiquidFertilizerDensity", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("DensityUnitId");

                    b.Property<int>("FertilizerId");

                    b.Property<decimal>("Value");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("DensityUnitId", "StaticDataVersionId");

                    b.HasIndex("FertilizerId", "StaticDataVersionId");

                    b.ToTable("LiquidFertilizerDensities");
                });

            modelBuilder.Entity("Agri.Models.Configuration.LiquidMaterialApplicationUSGallonsPerAcreRateConversion", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("ApplicationRateUnit");

                    b.Property<string>("ApplicationRateUnitName");

                    b.Property<decimal>("USGallonsPerAcreConversion");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("LiquidMaterialApplicationUsGallonsPerAcreRateConversions");
                });

            modelBuilder.Entity("Agri.Models.Configuration.LiquidMaterialsConversionFactor", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("InputUnit");

                    b.Property<string>("InputUnitName");

                    b.Property<decimal>("USGallonsOutput");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("LiquidMaterialsConversionFactors");
                });

            modelBuilder.Entity("Agri.Models.Configuration.LiquidSolidSeparationDefault", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("PercentOfLiquidSeparation");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("LiquidSolidSeparationDefaults");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Agri.Models.Configuration.MainMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("Controller");

                    b.Property<int>("JourneyId");

                    b.Property<string>("Name");

                    b.Property<string>("NextAction");

                    b.Property<string>("NextController");

                    b.Property<string>("PreviousAction");

                    b.Property<string>("PreviousController");

                    b.Property<int>("SortNumber");

                    b.Property<bool>("UseJavaScriptInterceptMethod");

                    b.HasKey("Id");

                    b.HasIndex("JourneyId");

                    b.ToTable("MainMenus");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Manure", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("Ammonia");

                    b.Property<decimal>("CubicYardConversion");

                    b.Property<int>("DryMatterId");

                    b.Property<string>("ManureClass");

                    b.Property<string>("Moisture");

                    b.Property<int>("NMineralizationId");

                    b.Property<string>("Name");

                    b.Property<decimal>("Nitrate");

                    b.Property<decimal>("Nitrogen");

                    b.Property<decimal>("Phosphorous");

                    b.Property<decimal>("Potassium");

                    b.Property<string>("SolidLiquid");

                    b.Property<int>("SortNum");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("DryMatterId", "StaticDataVersionId");

                    b.ToTable("Manures");
                });

            modelBuilder.Entity("Agri.Models.Configuration.ManureImportedDefault", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<decimal>("DefaultSolidMoisture");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("ManureImportedDefaults");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Message", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("Balance1High");

                    b.Property<int>("Balance1Low");

                    b.Property<int>("BalanceHigh");

                    b.Property<int>("BalanceLow");

                    b.Property<string>("BalanceType");

                    b.Property<string>("DisplayMessage");

                    b.Property<string>("Icon");

                    b.Property<decimal>("SoilTestHigh");

                    b.Property<decimal>("SoilTestLow");

                    b.Property<string>("Text");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Agri.Models.Configuration.MiniApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MiniApps");
                });

            modelBuilder.Entity("Agri.Models.Configuration.MiniAppLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LabelText");

                    b.Property<int>("MiniAppId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("MiniAppId");

                    b.ToTable("MiniAppLabels");
                });

            modelBuilder.Entity("Agri.Models.Configuration.NitrateCreditSampleDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("FromDateMonth");

                    b.Property<string>("Location");

                    b.Property<string>("ToDateMonth");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("NitrateCreditSampleDates");
                });

            modelBuilder.Entity("Agri.Models.Configuration.NitrogenMineralization", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("LocationId");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<decimal>("FirstYearValue");

                    b.Property<decimal>("LongTermValue");

                    b.Property<string>("Name");

                    b.HasKey("Id", "LocationId", "StaticDataVersionId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("NitrogenMineralizations");
                });

            modelBuilder.Entity("Agri.Models.Configuration.NitrogenRecommendation", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("RecommendationDesc");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("NitrogenRecommendations");
                });

            modelBuilder.Entity("Agri.Models.Configuration.NutrientIcon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Definition");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("NutrientIcons");
                });

            modelBuilder.Entity("Agri.Models.Configuration.PhosphorusSoilTestRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("LowerLimit");

                    b.Property<string>("Rating");

                    b.Property<int>("UpperLimit");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("PhosphorusSoilTestRanges");
                });

            modelBuilder.Entity("Agri.Models.Configuration.PotassiumSoilTestRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("LowerLimit");

                    b.Property<string>("Rating");

                    b.Property<int>("UpperLimit");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("PotassiumSoilTestRanges");
                });

            modelBuilder.Entity("Agri.Models.Configuration.PreviousCropType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("CropId");

                    b.Property<int?>("CropTypeId");

                    b.Property<int?>("CropTypeStaticDataVersionId");

                    b.Property<string>("Name");

                    b.Property<int>("NitrogenCreditImperial");

                    b.Property<int>("NitrogenCreditMetric");

                    b.Property<int>("PreviousCropCode");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("CropTypeId", "CropTypeStaticDataVersionId");

                    b.HasIndex("CropId", "PreviousCropCode", "StaticDataVersionId");

                    b.ToTable("PreviousCropType");
                });

            modelBuilder.Entity("Agri.Models.Configuration.PreviousManureApplicationYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("FieldManureApplicationHistory");

                    b.Property<string>("Name");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("PrevManureApplicationYears");
                });

            modelBuilder.Entity("Agri.Models.Configuration.PreviousYearManureApplicationNitrogenDefault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int[]>("DefaultNitrogenCredit");

                    b.Property<int>("FieldManureApplicationHistory");

                    b.Property<string>("PreviousYearManureAplicationFrequency");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("PrevYearManureApplicationNitrogenDefaults");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Region", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("LocationId");

                    b.Property<string>("Name");

                    b.Property<int>("SoilTestPhosphorousRegionCd");

                    b.Property<int>("SoilTestPotassiumRegionCd");

                    b.Property<int>("SortNumber");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Agri.Models.Configuration.RptCompletedFertilizerRequiredStdUnit", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("LiquidUnitId");

                    b.Property<int>("SolidUnitId");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("RptCompletedFertilizerRequiredStdUnits");
                });

            modelBuilder.Entity("Agri.Models.Configuration.RptCompletedManureRequiredStdUnit", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("LiquidUnitId");

                    b.Property<int>("SolidUnitId");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("RptCompletedManureRequiredStdUnits");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SeasonApplication", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("ApplicationMethod");

                    b.Property<string>("Compost");

                    b.Property<decimal>("DryMatter1To5Percent");

                    b.Property<decimal>("DryMatter5To10Percent");

                    b.Property<decimal>("DryMatterGreaterThan10Percent");

                    b.Property<decimal>("DryMatterLessThan1Percent");

                    b.Property<string>("ManureType");

                    b.Property<string>("Name");

                    b.Property<string>("PoultrySolid");

                    b.Property<string>("Season");

                    b.Property<int>("SortNum");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("SeasonApplications");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestMethod", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<decimal>("ConvertToKelownaK");

                    b.Property<decimal>("ConvertToKelownaPHGreaterThanEqual72");

                    b.Property<decimal>("ConvertToKelownaPHLessThan72");

                    b.Property<string>("Name");

                    b.Property<int>("SortNum");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("SoilTestMethods");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPhosphorousKelownaRange", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("Range");

                    b.Property<int>("RangeHigh");

                    b.Property<int>("RangeLow");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("SoilTestPhosphorousKelownaRanges");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPhosphorousRecommendation", b =>
                {
                    b.Property<int>("SoilTestPhosphorousKelownaRangeId");

                    b.Property<int>("SoilTestPhosphorousRegionCode");

                    b.Property<int>("PhosphorousCropGroupRegionCode");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("P2O5RecommendationKilogramPerHectare");

                    b.HasKey("SoilTestPhosphorousKelownaRangeId", "SoilTestPhosphorousRegionCode", "PhosphorousCropGroupRegionCode", "StaticDataVersionId");

                    b.HasAlternateKey("PhosphorousCropGroupRegionCode", "SoilTestPhosphorousKelownaRangeId", "SoilTestPhosphorousRegionCode", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("SoilTestPhosphorousKelownaRangeId", "StaticDataVersionId");

                    b.ToTable("SoilTestPhosphorousRecommendation");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPhosphorusRange", b =>
                {
                    b.Property<int>("UpperLimit");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("Rating");

                    b.HasKey("UpperLimit", "StaticDataVersionId");

                    b.HasAlternateKey("StaticDataVersionId", "UpperLimit");

                    b.ToTable("SoilTestPhosphorusRanges");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPotassiumKelownaRange", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("Range");

                    b.Property<int>("RangeHigh");

                    b.Property<int>("RangeLow");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("SoilTestPotassiumKelownaRanges");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPotassiumRange", b =>
                {
                    b.Property<int>("UpperLimit");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("Rating");

                    b.HasKey("UpperLimit", "StaticDataVersionId");

                    b.HasAlternateKey("StaticDataVersionId", "UpperLimit");

                    b.ToTable("SoilTestPotassiumRanges");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPotassiumRecommendation", b =>
                {
                    b.Property<int>("SoilTestPotassiumKelownaRangeId");

                    b.Property<int>("SoilTestPotassiumRegionCode");

                    b.Property<int>("PotassiumCropGroupRegionCode");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("K2ORecommendationKilogramPerHectare");

                    b.HasKey("SoilTestPotassiumKelownaRangeId", "SoilTestPotassiumRegionCode", "PotassiumCropGroupRegionCode", "StaticDataVersionId");

                    b.HasAlternateKey("PotassiumCropGroupRegionCode", "SoilTestPotassiumKelownaRangeId", "SoilTestPotassiumRegionCode", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("SoilTestPotassiumKelownaRangeId", "StaticDataVersionId");

                    b.ToTable("SoilTestPotassiumRecommendation");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SolidMaterialApplicationTonPerAcreRateConversion", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("ApplicationRateUnit");

                    b.Property<string>("ApplicationRateUnitName");

                    b.Property<string>("TonsPerAcreConversion");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("SolidMaterialApplicationTonPerAcreRateConversions");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SolidMaterialsConversionFactor", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("CubicMetersOutput");

                    b.Property<string>("CubicYardsOutput");

                    b.Property<int>("InputUnit");

                    b.Property<string>("InputUnitName");

                    b.Property<string>("MetricTonsOutput");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("SolidMaterialsConversionFactors");
                });

            modelBuilder.Entity("Agri.Models.Configuration.StaticDataVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments")
                        .HasColumnType("VARCHAR(4000)");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.ToTable("StaticDataVersions");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SubMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("Controller");

                    b.Property<int>("MainMenuId");

                    b.Property<string>("Name");

                    b.Property<string>("NextAction");

                    b.Property<string>("NextController");

                    b.Property<string>("PreviousAction");

                    b.Property<string>("PreviousController");

                    b.Property<int>("SortNumber");

                    b.Property<bool>("UseJavaScriptInterceptMethod");

                    b.HasKey("Id");

                    b.HasIndex("MainMenuId");

                    b.ToTable("SubMenu");
                });

            modelBuilder.Entity("Agri.Models.Configuration.SubRegion", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("AnnualPrecipitation");

                    b.Property<int>("AnnualPrecipitationOctToMar");

                    b.Property<string>("Name");

                    b.Property<int>("RegionId");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.HasIndex("RegionId", "StaticDataVersionId");

                    b.ToTable("SubRegion");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Unit", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<decimal>("ConversionlbTon");

                    b.Property<decimal>("CostApplications");

                    b.Property<string>("CostUnits");

                    b.Property<string>("DollarUnitArea");

                    b.Property<decimal>("FarmReqdNutrientsStdUnitsAreaConversion");

                    b.Property<decimal>("FarmReqdNutrientsStdUnitsConversion");

                    b.Property<string>("Name");

                    b.Property<string>("NutrientContentUnits");

                    b.Property<string>("NutrientRateUnits");

                    b.Property<string>("SolidLiquid");

                    b.Property<decimal>("ValueK2O");

                    b.Property<string>("ValueMaterialUnits");

                    b.Property<decimal>("ValueN");

                    b.Property<decimal>("ValueP2O5");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Agri.Models.Configuration.UserPrompt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("UserPrompts");
                });

            modelBuilder.Entity("Agri.Models.Configuration.Yield", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("StaticDataVersionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("YieldDesc");

                    b.HasKey("Id", "StaticDataVersionId");

                    b.HasIndex("StaticDataVersionId");

                    b.ToTable("Yields");
                });

            modelBuilder.Entity("Agri.Models.Security.ManageVersionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("ManageVersionUsers");
                });

            modelBuilder.Entity("Agri.Models.Configuration.AmmoniaRetention", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("AmmoniaRetentions")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.Animal", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Animals")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.AnimalSubType", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("AnimalSubTypes")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.Animal", "Animal")
                        .WithMany("AnimalSubTypes")
                        .HasForeignKey("AnimalId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.BCSampleDateForNitrateCredit", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("BCSampleDateForNitrateCredits")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.Breed", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Breeds")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.Animal", "Animal")
                        .WithMany("Breeds")
                        .HasForeignKey("AnimalId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.ConversionFactor", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("ConversionFactors")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.Crop", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Crops")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.CropType", "CropType")
                        .WithMany("Crops")
                        .HasForeignKey("CropTypeId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.PreviousYearManureApplicationNitrogenDefault", "PreviousYearManureApplicationNitrogenDefault")
                        .WithMany("Crops")
                        .HasForeignKey("ManureApplicationHistory", "StaticDataVersionId")
                        .HasPrincipalKey("FieldManureApplicationHistory", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.CropSoilTestPhosphorousRegion", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("CropSoilTestPhosphorousRegions")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.Crop", "Crop")
                        .WithMany("CropSoilTestPhosphorousRegions")
                        .HasForeignKey("CropId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.CropSoilTestPotassiumRegion", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("CropSoilTestPotassiumRegions")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.Crop", "Crop")
                        .WithMany("CropSoilTestPotassiumRegions")
                        .HasForeignKey("CropId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.CropType", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("CropTypes")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.CropYield", b =>
                {
                    b.HasOne("Agri.Models.Configuration.Location", "Location")
                        .WithMany("CropYields")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("CropYields")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.Crop", "Crop")
                        .WithMany("CropYields")
                        .HasForeignKey("CropId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.DefaultSoilTest", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("DefaultSoilTests")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.DensityUnit", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("DensityUnits")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.DryMatter", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("DryMatters")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.Fertilizer", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Fertilizers")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.FertilizerMethod", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("FertilizerMethods")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.FertilizerType", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("FertilizerTypes")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.FertilizerUnit", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("FertilizerUnits")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.HarvestUnit", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("HarvestUnits")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.LiquidFertilizerDensity", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("LiquidFertilizerDensities")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.DensityUnit", "DensityUnit")
                        .WithMany("LiquidFertilizerDensities")
                        .HasForeignKey("DensityUnitId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.Fertilizer", "Fertilizer")
                        .WithMany("LiquidFertilizerDensities")
                        .HasForeignKey("FertilizerId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.LiquidMaterialApplicationUSGallonsPerAcreRateConversion", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("LiquidMaterialApplicationUsGallonsPerAcreRateConversions")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.LiquidMaterialsConversionFactor", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("LiquidMaterialsConversionFactors")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.LiquidSolidSeparationDefault", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("LiquidSolidSeparationDefaults")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.MainMenu", b =>
                {
                    b.HasOne("Agri.Models.Configuration.Journey", "Journey")
                        .WithMany("MainMenus")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.Manure", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Manures")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.DryMatter", "DryMatter")
                        .WithMany("Manures")
                        .HasForeignKey("DryMatterId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.ManureImportedDefault", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("ManureImportedDefaults")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.Message", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Messages")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.MiniAppLabel", b =>
                {
                    b.HasOne("Agri.Models.Configuration.MiniApp", "MiniApp")
                        .WithMany()
                        .HasForeignKey("MiniAppId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.NitrateCreditSampleDate", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("NitrateCreditSampleDates")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.NitrogenMineralization", b =>
                {
                    b.HasOne("Agri.Models.Configuration.Location", "Location")
                        .WithMany("NitrogenMineralizations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("NitrogenMineralizations")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.NitrogenRecommendation", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("NitrogenRecommendations")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.PhosphorusSoilTestRange", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("PhosphorusSoilTestRanges")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.PotassiumSoilTestRange", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("PotassiumSoilTestRanges")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.PreviousCropType", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("PreviousCropTypes")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.CropType")
                        .WithMany("PrevCropTypes")
                        .HasForeignKey("CropTypeId", "CropTypeStaticDataVersionId");

                    b.HasOne("Agri.Models.Configuration.Crop", "Crop")
                        .WithMany("PreviousCropTypes")
                        .HasForeignKey("CropId", "PreviousCropCode", "StaticDataVersionId")
                        .HasPrincipalKey("Id", "PreviousCropCode", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.PreviousManureApplicationYear", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("PrevManureApplicationYears")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.PreviousYearManureApplicationNitrogenDefault", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("PrevYearManureApplicationNitrogenDefaults")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.PreviousManureApplicationYear", "PreviousManureApplicationYear")
                        .WithMany("PreviousYearManureApplicationNitrogenDefaults")
                        .HasForeignKey("FieldManureApplicationHistory", "StaticDataVersionId")
                        .HasPrincipalKey("FieldManureApplicationHistory", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.Region", b =>
                {
                    b.HasOne("Agri.Models.Configuration.Location", "Location")
                        .WithMany("Regions")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Regions")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.RptCompletedFertilizerRequiredStdUnit", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("RptCompletedFertilizerRequiredStdUnits")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.RptCompletedManureRequiredStdUnit", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("RptCompletedManureRequiredStdUnits")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.SeasonApplication", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SeasonApplications")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestMethod", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SoilTestMethods")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPhosphorousKelownaRange", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SoilTestPhosphorousKelownaRanges")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPhosphorousRecommendation", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SoilTestPhosphorousRecommendations")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.SoilTestPhosphorousKelownaRange", "SoilTestPhosphorousKelownaRange")
                        .WithMany("SoilTestPhosphorousRecommendations")
                        .HasForeignKey("SoilTestPhosphorousKelownaRangeId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPhosphorusRange", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SoilTestPhosphorusRanges")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPotassiumKelownaRange", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SoilTestPotassiumKelownaRanges")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPotassiumRange", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SoilTestPotassiumRanges")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.SoilTestPotassiumRecommendation", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SoilTestPotassiumRecommendations")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.SoilTestPotassiumKelownaRange", "SoilTestPotassiumKelownaRange")
                        .WithMany("SoilTestPotassiumRecommendations")
                        .HasForeignKey("SoilTestPotassiumKelownaRangeId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.SolidMaterialApplicationTonPerAcreRateConversion", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SolidMaterialApplicationTonPerAcreRateConversions")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.SolidMaterialsConversionFactor", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SolidMaterialsConversionFactors")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.SubMenu", b =>
                {
                    b.HasOne("Agri.Models.Configuration.MainMenu", "MainMenu")
                        .WithMany("SubMenus")
                        .HasForeignKey("MainMenuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.SubRegion", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("SubRegions")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agri.Models.Configuration.Region", "Region")
                        .WithMany("SubRegions")
                        .HasForeignKey("RegionId", "StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.Unit", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Units")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Agri.Models.Configuration.Yield", b =>
                {
                    b.HasOne("Agri.Models.Configuration.StaticDataVersion", "Version")
                        .WithMany("Yields")
                        .HasForeignKey("StaticDataVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
